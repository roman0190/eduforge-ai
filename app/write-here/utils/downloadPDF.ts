// utils/downloadPDF.ts
/**
 * PDF Generation Utility
 * Creates a professional PDF document from text content with proper styling and formatting
 */
export const downloadPDF = async (
  text: string,
  filename: string
): Promise<void> => {
  // Safety check for browser environment
  if (typeof window === "undefined" || typeof document === "undefined") return;

  try {
    // Dynamic import to avoid SSR issues
    const { default: jsPDF } = await import("jspdf");

    // No need to get content element since text is passed directly

    // Skip content extraction - text is already provided as parameter

    // Parse document metadata from filename
    const filenameParts = filename.split(" ");
    const category = filenameParts[0] || "Document";
    const topic = filenameParts.slice(1).join(" ").replace(".pdf", "");
    const wordCount = text.split(/\s+/).filter(Boolean).length;
    const dateFormatted = new Date().toLocaleDateString(undefined, {
      year: "numeric",
      month: "long",
      day: "numeric",
    });

    // Create temporary styled container for PDF generation
    const pdfContainer = document.createElement("div");

    // Set container styles
    Object.assign(pdfContainer.style, {
      width: "794px", // A4 width at 96 DPI
      padding: "40px",
      fontFamily: "Arial, Helvetica, sans-serif",
      backgroundColor: "#ffffff",
      color: "#000000",
      position: "absolute",
      left: "-9999px",
    });

    // Build PDF document structure with professional styling
    pdfContainer.innerHTML = `
      <div style="margin-bottom: 30px; text-align: center;">
        <h1 style="font-size: 24px; margin: 0; color: #2563eb; font-weight: 600;">${category}: ${topic}</h1>
        <div style="width: 100px; height: 3px; background-color: #2563eb; margin: 12px auto;"></div>
        <p style="font-size: 12px; margin: 5px 0 0 0; color: #666;">
          Generated by EduForge AI | ${dateFormatted}
        </p>
      </div>
      
      <div style="position: relative; min-height: 400px;">
        <!-- Image watermark -->
        <div style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; 
                    display: flex; justify-content: center; align-items: center; 
                    pointer-events: none; opacity: 0.1;">
          <img src="/logo.png" alt="Adhayan Academic Coaching" 
               style="max-width: 300px; max-height: 300px; object-fit: contain;" />
        </div>
        
        <!-- Main content -->
        <div style="position: relative; z-index: 2; font-size: 14px; line-height: 1.8; 
                   text-align: justify; white-space: pre-wrap; letter-spacing: 0.3px;">
          ${text.replace(/</g, "&lt;").replace(/>/g, "&gt;")}
        </div>
      </div>
      
      <!-- Footer -->
      <div style="margin-top: 40px; padding-top: 15px; border-top: 1px solid #e5e7eb; 
                 display: flex; justify-content: space-between; font-size: 10px; color: #666;">
        <div>https://eduforge-ai.vercel.app/</div>
        <div>Word count: ${wordCount} words</div>
      </div>
    `;

    // Add to DOM temporarily for rendering
    document.body.appendChild(pdfContainer);

    try {
      // Dynamic import html2canvas
      const { default: html2canvas } = await import("html2canvas");

      // Make sure logo is loaded before canvas rendering
      const logoImg = pdfContainer.querySelector("img");
      if (logoImg) {
        await new Promise((resolve) => {
          if (logoImg.complete) {
            resolve(true);
          } else {
            logoImg.onload = () => resolve(true);
            logoImg.onerror = () => {
              console.warn("Logo image failed to load");
              resolve(false);
            };
          }
        });
      }

      // Create high-quality canvas from styled content
      const canvas = await html2canvas(pdfContainer, {
        scale: 2,
        useCORS: true,
        allowTaint: true,
        logging: false,
        backgroundColor: "#ffffff",
      });

      // Convert canvas to image data
      const imgData = canvas.toDataURL("image/jpeg", 1.0);

      // Create PDF document
      const pdf = new jsPDF({
        orientation: "portrait",
        unit: "mm",
        format: "a4",
      });

      // Calculate dimensions for proper scaling
      const imgWidth = 210; // A4 width in mm
      const pageHeight = 297; // A4 height in mm
      const imgHeight = (canvas.height * imgWidth) / canvas.width;

      // Handle multi-page content
      let heightLeft = imgHeight;
      let position = 0;

      // Add first page
      pdf.addImage(imgData, "JPEG", 0, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;

      // Add additional pages if content is longer than one page
      while (heightLeft > 0) {
        position = heightLeft - imgHeight;
        pdf.addPage();
        pdf.addImage(imgData, "JPEG", 0, position, imgWidth, imgHeight);
        heightLeft -= pageHeight;
      }

      // Download the finished PDF
      pdf.save(filename);
    } finally {
      // Always clean up temporary elements
      if (document.body.contains(pdfContainer)) {
        document.body.removeChild(pdfContainer);
      }
    }
  } catch (error) {
    console.error("PDF generation failed:", error);
    alert("Could not generate PDF. Please try again.");
  }
};
